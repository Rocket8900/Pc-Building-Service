volumes:
  pgdata:

networks:
  kong-net:
    driver: bridge
    name: kong-net

version: "3.8"

services:
  ####################################################
  # SQL DB
  ####################################################
  db:
    image: mysql:5.7
    platform: linux/amd64
    volumes:
      - ./cart/cart.sql:/docker-entrypoint-initdb.d/cart.sql
      - ./order/pc_order.sql:/docker-entrypoint-initdb.d/pc_order.sql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secure_password # Use MYSQL_ROOT_PASSWORD for the root user's password
      MYSQL_DATABASE: pc_order
      # Remove MYSQL_USER and MYSQL_PASSWORD as they are not used for the root user
    ports:
      - "3306:3306"
    networks:
      - kong-net
  ####################################################
  # Order MS
  ####################################################
  order-ms:
    build:
      context: ./order
      dockerfile: Dockerfile
    image: order-ms
    container_name: order-ms
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:secure_password@db:3306/pc_order
      - PYTHONUNBUFFERED=1
    ports:
      - "5001:5001"
    networks:
      - kong-net
    restart: always

  ####################################################
  # Recommendation MS
  ####################################################
  recommendation-ms:
    build:
      context: ./recommendation
      dockerfile: Dockerfile
    image: recommendation-ms
    container_name: recommendation-ms
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "5800:5800"
    networks:
      - kong-net
    restart: always
    

  ####################################################
  # Cart MS
  ####################################################
  cart-ms:
    build:
      context: ./cart
      dockerfile: Dockerfile
    image: cart-ms
    container_name: cart-ms
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:secure_password@db:3306/cart
      - PYTHONUNBUFFERED=1
    ports:
      - "5002:5002"
    networks:
      - kong-net
    restart: always

  ####################################################
  # Handling Order CMS
  ####################################################
  handling-order-cms:
    build:
      context: ./handling-order-cms
      dockerfile: Dockerfile
    image: handling-order-cms
    container_name: handling-order-cms
    ports:
      - "5100:5100"
    restart: always
    networks:
      - kong-net
    depends_on:
      - cart-ms
      - order-ms
      - notification-ms

  ####################################################
  # Building PC CMS
  ####################################################
  bulding-pc-cms:
    build:
      context: ./building_pc_complex
      dockerfile: Dockerfile
    image: building-pc-cms
    container_name: building-pc-cms
    env_file:
      - .env
    ports:
      - "5005:5005"
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - kong-net

  ####################################################
  # Notification MS
  ####################################################
  notification-ms:
    build:
      context: ./notification-ms
      dockerfile: Dockerfile
    image: notification-ms
    container_name: notification-ms
    ports:
      - "5900:5900"
    networks:
      - kong-net
    env_file:
      - ./notification-ms/.env
    restart: always
    depends_on:
      - "rabbit-forward"

  ####################################################
  # Parts MS
  ####################################################
  parts-ms:
    build:
      context: ./parts_simple
      dockerfile: Dockerfile
    image: parts-ms
    container_name: parts-ms
    ports:
      - "5950:5950"
    networks:
      - kong-net
    restart: always

  ####################################################
  # Consumes Activity Log Queue & Post to Firestore DB
  ####################################################
  activity-log-ms:
    build:
      context: ./activity_log
      dockerfile: Dockerfile
    image: activity-log-ms
    container_name: activity-log-ms
    ports:
      - "3000:3000"
    env_file:
      - .env
    restart: always
    networks:
      - kong-net
    depends_on:
      - "rabbit-forward"

  #################################################
  # Consumes Error Log Queue & Post to Firestore DB
  #################################################
  error-log-ms:
    build:
      context: ./error_log
      dockerfile: Dockerfile
    image: error-log-ms
    container_name: error-log-ms
    ports:
      - "4000:4000"
    env_file:
      - .env
    restart: always
    networks:
      - kong-net
    depends_on:
      - "rabbit-forward"

  ########################################
  # Foward HTTP Request (POST) to RabbitMQ
  ########################################
  rabbit-forward:
    build:
      context: ./rabbit_forward
      dockerfile: Dockerfile
    image: rabbit-forward
    container_name: rabbit-forward
    ports:
      - "3200:3200"
    networks:
      - kong-net
    env_file:
      - .env
    restart: always

  ########################################
  # User Account Simple MS
  ########################################
  user-account-simple:
    build:
      context: ./UserAccount_SimpleMS
      dockerfile: Dockerfile
    image: user-account-simple
    container_name: user-account-simple
    ports:
      - "5010:5010"
    networks:
      - kong-net
    restart: always

  ########################################
  # User Account Complex MS
  ########################################
  user-account-complex:
    build:
      context: ./UserAccount_ComplexMS
      dockerfile: Dockerfile
    image: user-account-complex
    container_name: user-account-complex
    ports:
      - "5015:5015"
    networks:
      - kong-net
    env_file:
      - .env
    restart: always

  #########################################################
  # Communicate between UI & Firestore DB (Connect to KONG)
  #########################################################
  retrieve-logs:
    build:
      context: ./retrieve_logs
      dockerfile: Dockerfile
    image: retrieve-logs
    container_name: retrieve-logs
    networks:
      - kong-net
    ports:
      - "3900:3900"
    env_file:
      - .env
    restart: always

  #######################################################
  # Communicate between UI & Stripe API (Connect to KONG)
  #######################################################
  payment-ms:
    build:
      context: ./payment
      dockerfile: Dockerfile
    image: payment-ms
    container_name: payment-ms
    networks:
      - kong-net
    ports:
      - "3400:3400"
    env_file:
      - ./payment/.env
    restart: always

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
